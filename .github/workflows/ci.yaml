name: Deploy mygoapp to K3s

on:
  push:
    branches: 
      - main
      - staging

jobs:
  # Prepare the commit hash for tagging Docker images
  prep:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit_hash.outputs.commit_hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get short commit hash
        id: get_commit_hash
        run: echo "commit_hash=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

  # Build and push Docker images
  docker:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      # ... (steps for Docker setup and login)
      - name: Build and Push Docker Image Nginx
        run: |
          docker buildx build --platform linux/arm64 -f ./docker/nginx/Dockerfile -t ${{ secrets.DOCKER_HUB_USER_NAME }}/cubbit-task-nginx:${{ needs.prep.outputs.commit_hash }} --push .
      - name: Build and Push Docker Image App
        run: |
          docker buildx build --platform linux/arm64 -f ./docker/simple-go-app/Dockerfile -t ${{ secrets.DOCKER_HUB_USER_NAME }}/cubbit-task-app:${{ needs.prep.outputs.commit_hash }} --push .

  # Prepare Kubernetes configuration
  prep_kubeconf:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      # ... (steps for installing Helm and kubectl)
      - name: Set up kubeconfig
        run: |
          # Use different kubeconfig based on the branch (main or staging)
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
          elif [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          fi
          chmod 600 kubeconfig
      - name: Upload kubeconfig
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig
          path: ./kubeconfig

  # Manual approval step for production deployment
  approve_prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Manual approval for prod
        run: echo "Deployment to prod approved"

  # Deploy the application using Helm
  deploy:
    needs: [prep_kubeconf, prep]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
    steps:
      # ... (steps for downloading kubeconfig and setting KUBECONFIG)
      - name: Wait for production approval
        if: github.ref == 'refs/heads/main'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: amaslovskyi
          minimum-approvals: 1
          issue-title: "Deploying to Production"
          issue-body: "Please approve or deny the deployment to production"
          exclude-workflow-initiator-as-approver: false
      - name: Deploy mygoapp with Helm
        run: |
          # Create namespace if it doesn't exist
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            kubectl create ns prod-mygoapp-ns --dry-run=client -o yaml | kubectl apply -f -
          elif [[ ${{ github.ref }} == 'refs/heads/staging' ]]; then
            kubectl create ns staging-mygoapp-ns --dry-run=client -o yaml | kubectl apply -f -
          fi
          # Deploy or upgrade the application using Helm
          helm upgrade --install mygoapp ./charts/simple-go-app \
            --set image.repository=${{ secrets.DOCKER_HUB_USER_NAME }}/cubbit-task-app \
            --set image.tag=${{ needs.prep.outputs.commit_hash }} \
            --set environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }} \
            --namespace ${{ github.ref == 'refs/heads/main' && 'prod-mygoapp-ns' || 'staging-mygoapp-ns' }}

  # Test the deployed application
  test_deployment:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      # ... (steps for downloading kubeconfig and setting KUBECONFIG)
      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/mygoapp -n ${{ github.ref == 'refs/heads/main' && 'prod-mygoapp-ns' || 'staging-mygoapp-ns' }} --timeout=300s
      - name: Test application availability
        run: |
          # Get the NodePort of the service
          NODE_PORT=$(kubectl get service mygoapp-svc -n ${{ github.ref == 'refs/heads/main' && 'prod-mygoapp-ns' || 'staging-mygoapp-ns' }} -o jsonpath='{.spec.ports[0].nodePort}')
          
          # Use different NODE_IP based on the environment
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            NODE_IP=${{ secrets.PROD_NODE_IP }}
          else
            NODE_IP=${{ secrets.STAGE_NODE_IP }}
          fi
          # Test the endpoint
          curl -f http://${NODE_IP}:$NODE_PORT/api/status || exit 1