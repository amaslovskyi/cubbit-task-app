apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mygoapp
  name: mygoapp
  namespace: {{ .Values.environment }}-mygoapp-ns
spec:
  minReadySeconds: 5
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: mygoapp
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mygoapp
    spec:
      securityContext:
        runAsUser: 82
        runAsGroup: 82
        fsGroup: 82
      containers:
        - name: nginx
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
          ports:
          - containerPort: 88
          envFrom:
            - configMapRef:
                name: mygoapp-nginx-conf
          resources:
            limits:
              cpu: "250m"
              memory: "300Mi"
            requests:
              cpu: "50m"
              memory: "50Mi"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 40; /usr/sbin/nginx", "-s", "quit"]
          startupProbe:
            httpGet:
              path: /api/status
              port: 88
              httpHeaders:
              - name: Host
                value: localhost
            initialDelaySeconds: 10
            failureThreshold: 3
            periodSeconds: 5
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /api/status
              port: 88
              httpHeaders:
              - name: Host
                value: localhost
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /nginx-ping
              port: 88
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 3
          volumeMounts:
            - mountPath: /etc/nginx/nginx.conf
              readOnly: true
              name: nginx-conf
              subPath: nginx.conf
        - name: mygoapp
          env:
          - name: API_KEY
            valueFrom:
              secretKeyRef:
                name: myapp-secret
                key: API_KEY
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          ports:
          - containerPort: 8080
          resources:
            limits:
              cpu: "250m"
              memory: "300Mi"
            requests:
              cpu: "50m"
              memory: "150Mi"
          startupProbe:
            httpGet:
              path: /api/status
              port: 8080
              httpHeaders:
              - name: Host
                value: localhost
            initialDelaySeconds: 10
            failureThreshold: 3
            periodSeconds: 5
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /api/status
              port: 8080
              httpHeaders:
              - name: Host
                value: localhost
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /api/status
              port: 8080
              httpHeaders:
              - name: Host
                value: localhost
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 3
      volumes:
        - name: nginx-conf
          configMap:
            name: mygoapp-nginx-conf